@using Microsoft.AspNetCore.Http.Extensions
@using TodoListApp.Services.Enums
@using TodoListApp.Services.WebApi.Enums
@model TodoTaskViewModel
@{
	var statusClass = Model.Status.ToLower().Replace(" ", "");
	var isCompleted = Model.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase);
	var isOverdue = Model.DueDate < DateTime.Now && !isCompleted;
	var canEdit = Model.Role == ListRole.Owner || Model.Role == ListRole.Editor;
}

<div class="card task-item mb-3 @(isCompleted ? "completed" : "") @(isOverdue ? "task-overdue" : "")">
	<div class="card-body">
		<div class="d-flex justify-content-between align-items-start">
			<a asp-controller="TodoTasks"
			   asp-action="Details"
			   asp-route-id="@Model.TaskId"
			   asp-route-listId="@Model.ListId"
			   asp-route-returnUrl="@Context.Request.GetEncodedUrl()"
			   class="flex-grow-1 text-decoration-none text-dark task-clickable">
				<div class="d-flex align-items-start gap-2">
					@if (isOverdue)
					{
						<i class="bi bi-exclamation-triangle-fill text-danger mt-1"></i>
					}
					<div class="flex-grow-1">
						<div class="d-flex flex-wrap align-items-center mb-2 gap-2">
							<h6 class="task-title mb-0 me-2">@Model.Title</h6>
							@if (Model.Tags != null && Model.Tags.Any())
							{
								<div class="d-flex flex-wrap gap-1 tag-container">
									@foreach (var tag in Model.Tags)
									{
										<span class="badge bg-info">@tag</span>
									}
								</div>
							}
						</div>
						@if (!string.IsNullOrEmpty(Model.Description))
						{
							<p class="text-muted mb-2">@Model.Description</p>
						}
						else
						{
							<p class="text-muted mb-2"><em>No description</em></p>
						}
						<div class="d-flex gap-2 align-items-center flex-wrap">
							<span class="badge status-badge status-@statusClass">@Model.Status</span>
							<small class="text-muted">
								<i class="bi bi-calendar-plus"></i>
								Created: @Model.CreationDate.ToString("MMM dd, yyyy")
							</small>
							<small class="text-@(isOverdue ? "danger fw-bold" : "muted")">
								<i class="bi bi-calendar-event"></i>
								Due: @Model.DueDate.ToString("MMM dd, yyyy")
								@if (isOverdue)
								{
									<span class="badge bg-danger ms-1">OVERDUE</span>
								}
							</small>
							<small class="text-muted">
								<i class="bi bi-person"></i> @Model.OwnerName
							</small>
						</div>
					</div>
				</div>
			</a>
			
				@{
					if (canEdit || Model.IsAssignee)
					{
					<div class="dropdown ms-2">
						<button class="btn btn-sm btn-outline-secondary"
								type="button"
								data-bs-toggle="dropdown"
								aria-expanded="false">
							<i class="bi bi-three-dots-vertical"></i>
						</button>
						<ul class="dropdown-menu dropdown-menu-end">
							@if (canEdit){
								<li>
									<a class="dropdown-item"
									   asp-controller="TodoTasks"
									   asp-action="Edit"
									   asp-route-id="@Model.TaskId"
									   asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))">
										<i class="bi bi-pencil"></i> Edit
									</a>
								</li>
							}
							@if (Model.Status.Equals("Not Started", StringComparison.OrdinalIgnoreCase))
							{
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.InProgress)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-hourglass-split"></i> Mark In Progress
										</button>
									</form>
								</li>
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.Completed)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-check-circle-fill"></i> Mark Completed
										</button>
									</form>
								</li>
							}
							else if (Model.Status.Equals("In Progress", StringComparison.OrdinalIgnoreCase))
							{
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.NotStarted)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-circle"></i> Mark Not Started
										</button>
									</form>
								</li>
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.Completed)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-check-circle-fill"></i> Mark Completed
										</button>
									</form>
								</li>
							}
							else
							{
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.NotStarted)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-circle"></i> Mark Not Started
										</button>
									</form>
								</li>
								<li>
									<form asp-controller="TodoTasks"
										  asp-action="UpdateStatus"
										  asp-route-id="@Model.TaskId"
										  asp-route-status="@((int)TodoTaskStatus.InProgress)"
										  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
										  method="post"
										  class="d-inline">
										<button type="submit" class="dropdown-item">
											<i class="bi bi-hourglass-split"></i> Mark In Progress
										</button>
									</form>
								</li>
							}
							@if(canEdit)
							{
								<li><hr class="dropdown-divider"></li>
								<li>
								<form asp-controller="TodoTasks"
									  asp-action="Delete"
									  asp-route-id="@Model.TaskId"
									  asp-route-listId="@Model.ListId"
									  asp-route-returnUrl="@(new Uri(Context.Request.GetEncodedUrl(), UriKind.Absolute))"
									  method="post"
									  onsubmit="return confirm('Are you sure you want to delete this task?');"
									  class="d-inline">
									<button type="submit" class="dropdown-item text-danger">
										<i class="bi bi-trash"></i> Delete
									</button>
								</form>
							</li>
							}
						</ul>
					</div>
					}
				}
		</div>
	</div>
</div>